"""autogenerated by genpy from unit/twoBallRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class twoBallRequest(genpy.Message):
  _md5sum = "9aab00efcf8e8e572d4bddea15fb584a"
  _type = "unit/twoBallRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
float32 position1x
float32 position1y



float32 position2x
float32 position2y


float32 angle_a4
float32 angle_a5

"""
  __slots__ = ['position1x','position1y','position2x','position2y','angle_a4','angle_a5']
  _slot_types = ['float32','float32','float32','float32','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position1x,position1y,position2x,position2y,angle_a4,angle_a5

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(twoBallRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.position1x is None:
        self.position1x = 0.
      if self.position1y is None:
        self.position1y = 0.
      if self.position2x is None:
        self.position2x = 0.
      if self.position2y is None:
        self.position2y = 0.
      if self.angle_a4 is None:
        self.angle_a4 = 0.
      if self.angle_a5 is None:
        self.angle_a5 = 0.
    else:
      self.position1x = 0.
      self.position1y = 0.
      self.position2x = 0.
      self.position2y = 0.
      self.angle_a4 = 0.
      self.angle_a5 = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_6f.pack(_x.position1x, _x.position1y, _x.position2x, _x.position2y, _x.angle_a4, _x.angle_a5))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.position1x, _x.position1y, _x.position2x, _x.position2y, _x.angle_a4, _x.angle_a5,) = _struct_6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_6f.pack(_x.position1x, _x.position1y, _x.position2x, _x.position2y, _x.angle_a4, _x.angle_a5))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 24
      (_x.position1x, _x.position1y, _x.position2x, _x.position2y, _x.angle_a4, _x.angle_a5,) = _struct_6f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6f = struct.Struct("<6f")
"""autogenerated by genpy from unit/twoBallResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class twoBallResponse(genpy.Message):
  _md5sum = "c365bcf7798d0ca305f65671afe6cd16"
  _type = "unit/twoBallResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """float32 commandx
float32 commandy


"""
  __slots__ = ['commandx','commandy']
  _slot_types = ['float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       commandx,commandy

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(twoBallResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.commandx is None:
        self.commandx = 0.
      if self.commandy is None:
        self.commandy = 0.
    else:
      self.commandx = 0.
      self.commandy = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2f.pack(_x.commandx, _x.commandy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.commandx, _x.commandy,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2f.pack(_x.commandx, _x.commandy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 8
      (_x.commandx, _x.commandy,) = _struct_2f.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2f = struct.Struct("<2f")
class twoBall(object):
  _type          = 'unit/twoBall'
  _md5sum = '7b48d08338b2f5afc2a84ccbb423f69e'
  _request_class  = twoBallRequest
  _response_class = twoBallResponse
